// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: proto/node.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ServiceKVStore_Ping_FullMethodName   = "/kvstore.ServiceKVStore/Ping"
	ServiceKVStore_Put_FullMethodName    = "/kvstore.ServiceKVStore/Put"
	ServiceKVStore_Delete_FullMethodName = "/kvstore.ServiceKVStore/Delete"
)

// ServiceKVStoreClient is the client API for ServiceKVStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceKVStoreClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*Response, error)
	Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*Response, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*Response, error)
}

type serviceKVStoreClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceKVStoreClient(cc grpc.ClientConnInterface) ServiceKVStoreClient {
	return &serviceKVStoreClient{cc}
}

func (c *serviceKVStoreClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, ServiceKVStore_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceKVStoreClient) Put(ctx context.Context, in *PutRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, ServiceKVStore_Put_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceKVStoreClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, ServiceKVStore_Delete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceKVStoreServer is the server API for ServiceKVStore service.
// All implementations must embed UnimplementedServiceKVStoreServer
// for forward compatibility.
type ServiceKVStoreServer interface {
	Ping(context.Context, *PingRequest) (*Response, error)
	Put(context.Context, *PutRequest) (*Response, error)
	Delete(context.Context, *DeleteRequest) (*Response, error)
	mustEmbedUnimplementedServiceKVStoreServer()
}

// UnimplementedServiceKVStoreServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServiceKVStoreServer struct{}

func (UnimplementedServiceKVStoreServer) Ping(context.Context, *PingRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedServiceKVStoreServer) Put(context.Context, *PutRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Put not implemented")
}
func (UnimplementedServiceKVStoreServer) Delete(context.Context, *DeleteRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedServiceKVStoreServer) mustEmbedUnimplementedServiceKVStoreServer() {}
func (UnimplementedServiceKVStoreServer) testEmbeddedByValue()                        {}

// UnsafeServiceKVStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceKVStoreServer will
// result in compilation errors.
type UnsafeServiceKVStoreServer interface {
	mustEmbedUnimplementedServiceKVStoreServer()
}

func RegisterServiceKVStoreServer(s grpc.ServiceRegistrar, srv ServiceKVStoreServer) {
	// If the following call pancis, it indicates UnimplementedServiceKVStoreServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ServiceKVStore_ServiceDesc, srv)
}

func _ServiceKVStore_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceKVStoreServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceKVStore_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceKVStoreServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceKVStore_Put_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceKVStoreServer).Put(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceKVStore_Put_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceKVStoreServer).Put(ctx, req.(*PutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceKVStore_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceKVStoreServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ServiceKVStore_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceKVStoreServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceKVStore_ServiceDesc is the grpc.ServiceDesc for ServiceKVStore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceKVStore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kvstore.ServiceKVStore",
	HandlerType: (*ServiceKVStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _ServiceKVStore_Ping_Handler,
		},
		{
			MethodName: "Put",
			Handler:    _ServiceKVStore_Put_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ServiceKVStore_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/node.proto",
}
